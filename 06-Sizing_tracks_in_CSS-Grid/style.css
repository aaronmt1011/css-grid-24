/*
Sizing with percentages on grid-template-columns/grid-template-row is risky. 
Should only use sizes smaller than 100% due to the grid-gap and other size 
changers that are not factored into sizing the grid.

fractional units (fr) should be used more due to them taking into account the other
size changers then applying the sizes to make up a fraction of the main div.

(fr) can also be combined with other sizes (em, px, %, etc). The other sizes will be
laid down first then (fr) will be used to take up the remainder space.
*/



/*
This code with 1fr:
grid-template-columns: 200px 200px 1fr; 

Will use the leftover space after the other 2 columns are laid down and other size
changers also happen.


This code with 2 1fr: 
grid-template-columns: 200px 1fr 1fr; 

Will use the leftover space after the first column is laid down and other size 
changers also happen. The 2 1fr will split the leftover space between themselves 
and use 1/2 of the space each


This code with 1 1fr and 1 2fr: 
grid-template-columns: 200px 2fr 1fr; 

Will  use the leftover space after the first column is laid down and other size 
changers also happen. They will break down the space between each other. The 2fr
takes up 2/3 of the free space while 1fr takes the last 1/3 free space.
*/




/*
Using fractal units (fr) on grid-template-row is similar to using (fr) on 
grid-template-columns with one exception...

Using 1fr with grid-template-row (without setting any height size on grid div)
will result in nothing happening. This is because the default height size is 
just based off of the height of the contents inside of the div.
The default width is the the size of the viewport.

(fr) on grid-template-row is best used with a height (100px, 1000px, etc.) coded
on the grid div. This will allow the grid children to be able to size themselves
out amongst the larger amounts of free space.
*/

/*
Reminder! Using auto on grid-template-columns will result in the browser making 
the size of the columns equal to the size of the content inside of it. Wider 
content (sententces instead of numbers) will result in wider width sizes on the
columns (Grid column width will equal largest content).
*/


.container {
    display: grid;
    height: 600px;
    grid-gap: 20px;
    border: 10px solid var(--yellow);
    /*
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr 1fr;
    */
    grid-template-columns: auto 1fr;
}